input_data_with_folds = cbind(lasso_input, .folds=foldsForAllReps[[rep]])
print(input_data_with_folds$.folds)
# initialize testing and training sets for the specified fold
testData = filter(input_data_with_folds, .folds == fold)
trainData = filter(input_data_with_folds, .folds != fold)
# actual model ===========================================================================================================
# train the LASSO model, tune the parameters
set.seed(123)
cv_fit = cv.glmnet(as.matrix(trainData[,-c(1,2,length(trainData))]), as.vector(trainData[,1]), alpha = 1, nfolds = 5, intercept = TRUE, standardize = FALSE)
# extract the features selected
coefs = as.data.frame(as.matrix(coef(cv_fit, s = 8764.2299))) %>%
tibble::rownames_to_column(var = 'feature') %>%
filter(`1` != 0, feature != '(Intercept)')
# store features selecteed
feature_table = rbind(feature_table, data.frame("feature" = coefs$feature, "Fold" = fold, "Repetition" = rep))
View(feature_table)
# store number of features selected
numFeatures = length(coefs$feature)
# fit the LASSO model
actual_model = glmnet(x = as.matrix(trainData[,-c(1,2,length(trainData))]), y = as.vector(trainData[,1]), alpha = 1, lambda = 8764.2299)
# make prediction on testing data
x.test <- model.matrix(totalCE ~., testData[,-2])[,-1]
prediction <- actual_model %>% predict(x.test)
# make prediction on testing data
x.test <- model.matrix(totalCE ~., testData[,-2,length(testData)])[,-1]
prediction <- actual_model %>% predict(x.test)
x.test <- model.matrix(totalCE ~., testData[,-c(2,length(testData)]))[,-1]
# make prediction on testing data
x.test <- model.matrix(totalCE ~., testData[,-c(2,length(testData))])[,-1]
prediction <- actual_model %>% predict(x.test)
View(prediction)
# output the final performance
actual_performance = data.frame("RMSE" = RMSE(prediction,testData$totalCE), "Rsquare" = R2(prediction,testData$totalCE), "Fold" = fold, "Repetition" = rep, "Condition" = 'Actual')
View(actual_performance)
# output the final performance
actual_performance = data.frame("RMSE" = RMSE(prediction,testData$totalCE), "Rsquare" = R2(prediction,testData$totalCE), "Fold" = fold, "Repetition" = rep, "Condition" = 'Actual')
# output the final performance
actual_performance = data.frame("RMSE" = RMSE(prediction,testData$totalCE), "what" = R2(prediction,testData$totalCE), "Fold" = fold, "Repetition" = rep, "Condition" = 'Actual')
# output the final performance
actual_performance = data.frame("what2" = RMSE(prediction,testData$totalCE), "what" = R2(prediction,testData$totalCE), "Fold" = fold, "Repetition" = rep, "Condition" = 'Actual')
test = R2(prediction,testData$totalCE)
View(test)
test = cbind(prediction,testData$totalCE)
View(test)
test = as.data.frame(cbind(prediction,testData$totalCE))
ggplot(test, aes(x = `V2`, y = `s0`)) + geom_point()
# output the final performance
actual_performance = data.frame("RMSE" = RMSE(prediction,testData$totalCE), "Rsquare" = r2(prediction,testData$totalCE), "Fold" = fold, "Repetition" = rep, "Condition" = 'Actual')
# output the final performance
actual_performance = data.frame("RMSE" = RMSE(prediction,testData$totalCE), "Rsquare" = R2(prediction,testData$totalCE), "Fold" = fold, "Repetition" = rep, "Condition" = 'Actual')
# make prediction on testing data
x.test <- model.matrix(totalCE ~., testData[,-c(2,length(testData))])[,-1]
# make prediction on testing data
x.test <- model.matrix(totalCE ~., testData[,-c(2,length(testData))])[,-1]
prediction <- actual_model %>% predict(x.test)
View(prediction)
# output the final performance
actual_performance = data.frame("RMSE" = RMSE(prediction,testData$totalCE), "Rsquared" = R2(prediction,testData$totalCE), "Fold" = fold, "Repetition" = rep, "Condition" = 'Actual')
# make prediction on testing data
x.test <- model.matrix(totalCE ~., testData[,-c(2,length(testData))])[,-1]
# make prediction on testing data
x.test <- model.matrix(totalCE ~., testData[,-c(2,length(testData))])
# build permuted model ===================================================================================================
# randomly shuffle the response vector, totalCE. Predicting on this should be significantly worse
trainData$permuted_totalCE = sample(trainData$totalCE)
# fit the prermuted LASSO model
permuted_model = glmnet(x = as.matrix(trainData[,-c(1,2,length(trainData))]), y = as.vector(trainData[,1]), alpha = 1, lambda = 8764.2299)
# make prediction on testing data
x.test <- model.matrix(totalCE ~., testData[,-2, length(testData)])[,-1]
permuted_prediction <- permuted_model %>% predict(x.test)
# make prediction on testing data
x.test <- model.matrix(totalCE ~., testData[,-c(2,length(testData))])[,-1]
permuted_prediction <- permuted_model %>% predict(x.test)
permuted_prediction <- permuted_model %>% predict(x.test)
# fit the LASSO model
actual_model = glmnet(x = as.matrix(trainData[,-c(1,2,length(trainData))]), y = as.vector(trainData[,1]), alpha = 1, lambda = 8764.2299)
# make prediction on testing data
x.test <- model.matrix(totalCE ~., testData[,-c(2,length(testData))])[,-1]
prediction <- actual_model %>% predict(x.test)
# make prediction on testing data
x.test <- model.matrix(totalCE ~., testData[,-c(2,length(testData))])[,-1]
prediction <- actual_model %>% predict(x.test)
# make prediction on testing data
x.test <- model.matrix(totalCE ~., testData[,-c(2,length(testData))])[,-1]
# make prediction on testing data
x.test <- model.matrix(totalCE ~., testData[,-c(2,length(testData))])[,-1]
prediction <- actual_model %>% predict(x.test)
# initialize testing and training sets for the specified fold
testData = filter(input_data_with_folds, .folds == fold)
trainData = filter(input_data_with_folds, .folds != fold)
# actual model ===========================================================================================================
# train the LASSO model, tune the parameters
set.seed(123)
cv_fit = cv.glmnet(as.matrix(trainData[,-c(1,2,length(trainData))]), as.vector(trainData[,1]), alpha = 1, nfolds = 5, intercept = TRUE, standardize = FALSE)
# extract the features selected
coefs = as.data.frame(as.matrix(coef(cv_fit, s = 8764.2299))) %>%
tibble::rownames_to_column(var = 'feature') %>%
filter(`1` != 0, feature != '(Intercept)')
# store features selecteed
feature_table = rbind(feature_table, data.frame("feature" = coefs$feature, "Fold" = fold, "Repetition" = rep))
# store number of features selected
numFeatures = length(coefs$feature)
# fit the LASSO model
actual_model = glmnet(x = as.matrix(trainData[,-c(1,2,length(trainData))]), y = as.vector(trainData[,1]), alpha = 1, lambda = 8764.2299)
# make prediction on testing data
x.test <- model.matrix(totalCE ~., testData[,-c(2,length(testData))])[,-1]
prediction <- actual_model %>% predict(x.test)
# output the final performance
actual_performance = data.frame("RMSE" = RMSE(prediction,testData$totalCE), "Rsquare" = R2(prediction,testData$totalCE), "Fold" = fold, "Repetition" = rep, "Condition" = 'Actual')
comparison_table = rbind(comparison_table, actual_performance)
print(paste(numSelected, " features selected in Fold ", fold, " of repetition ", rep, "."))
print(paste(numFeatures, " features selected in Fold ", fold, " of repetition ", rep, "."))
# build permuted model ===================================================================================================
# randomly shuffle the response vector, totalCE. Predicting on this should be significantly worse
trainData$permuted_totalCE = sample(trainData$totalCE)
# fit the prermuted LASSO model
permuted_model = glmnet(x = as.matrix(trainData[,-c(1,2,length(trainData))]), y = as.vector(trainData[,1]), alpha = 1, lambda = 8764.2299)
# make prediction on testing data
x.test <- model.matrix(permuted_totalCE ~., testData[,-2])[,-1]
trainData = filter(input_data_with_folds, .folds != fold)
# build permuted model ===================================================================================================
# randomly shuffle the response vector, totalCE. Predicting on this should be significantly worse
trainData$totalCE = sample(trainData$totalCE)
# fit the prermuted LASSO model
permuted_model = glmnet(x = as.matrix(trainData[,-c(1,2,length(trainData))]), y = as.vector(trainData[,1]), alpha = 1, lambda = 8764.2299)
# make prediction on testing data
x.test <- model.matrix(totalCE ~., testData[,-2])[,-1]
permuted_prediction <- permuted_model %>% predict(x.test)
# make prediction on testing data
x.test <- model.matrix(totalCE ~., testData[,-c(2,length(trainData))])[,-1]
permuted_prediction <- permuted_model %>% predict(x.test)
# sometimes the permuted model selects 0 features and uses the mean of the totalCE as the prediction. In this case, an SD       is zero error is thrown; convert R2 value to 0.
if(is.na(R2(permuted_prediction,testData$totalCE))) {
permuted.R2 = 0 } else {
permuted.R2 = R2(permuted_prediction,testData$totalCE) }
permuted_performance = data.frame("RMSE" = RMSE(permuted_prediction,testData$totalCE), "Rsquare" = permuted.R2, "Fold" = fold, "Repetition" = rep, "Condition" = 'Permuted')
View(permuted_performance)
# sometimes the permuted model selects 0 features and uses the mean of the totalCE as the prediction. In this case, an SD       is zero error is thrown; convert R2 value to 0.
if(is.na(R2(permuted_prediction,testData$totalCE))) {
permuted.R2 = 0 } else {
permuted.R2 = cor(permuted_prediction, testData$totalCE)^2 } #R2(permuted_prediction,testData$totalCE) }
permuted_performance = data.frame("RMSE" = RMSE(permuted_prediction,testData$totalCE), "Rsquare" = permuted.R2, "Fold" = fold, "Repetition" = rep, "Condition" = 'Permuted')
View(permuted_performance)
# initialize testing and training sets for the specified fold
testData = filter(input_data_with_folds, .folds == fold)
trainData = filter(input_data_with_folds, .folds != fold)
# actual model ===========================================================================================================
# train the LASSO model, tune the parameters
set.seed(123)
cv_fit = cv.glmnet(as.matrix(trainData[,-c(1,2,length(trainData))]), as.vector(trainData[,1]), alpha = 1, nfolds = 5, intercept = TRUE, standardize = FALSE)
# extract the features selected
coefs = as.data.frame(as.matrix(coef(cv_fit, s = 8764.2299))) %>%
tibble::rownames_to_column(var = 'feature') %>%
filter(`1` != 0, feature != '(Intercept)')
# store features selecteed
feature_table = rbind(feature_table, data.frame("feature" = coefs$feature, "Fold" = fold, "Repetition" = rep))
# store number of features selected
numFeatures = length(coefs$feature)
# fit the LASSO model
actual_model = glmnet(x = as.matrix(trainData[,-c(1,2,length(trainData))]), y = as.vector(trainData[,1]), alpha = 1, lambda = 8764.2299)
# make prediction on testing data
x.test <- model.matrix(totalCE ~., testData[,-c(2,length(testData))])[,-1]
prediction <- actual_model %>% predict(x.test)
# output the final performance
actual_performance = data.frame("RMSE" = RMSE(prediction,testData$totalCE), "Rsquare" = cor(prediction, testData$totalCE)^2, "Fold" = fold, "Repetition" = rep, "Condition" = 'Actual')
View(actual_performance)
knitr::opts_knit$set(root.dir = '../processed_data')
library("ggplot2")
library("dplyr")
library("tidyr")
library(viridis)
require(cowplot)
require(forcats)
library(ggsignif)
induce_exp <- read.table("LacZ_variant_exp.txt", header = T)
options(digits=3)
induce_combo <- subset(induce_exp, grepl("COMBO", induce_exp$name)) %>% separate(col = 'name', into = c("Library", "Distal", "Min_35", "Min_10", "Proximal"), sep = "-", remove = F)
induce_distal <- subset(induce_exp, grepl("DISTAL", induce_exp$name)) %>% separate(col = 'name', into = c("Library", "Distal", "Offset", "Min_35", "Core", "Min_10"), sep = "-", remove = F)
induce_distal$Min_35 <- with(induce_distal, reorder(Min_35, ratio, median))
induce_distal$Min_10 <- with(induce_distal, reorder(Min_10, ratio, median))
induce_distal$Core <- with(induce_distal, reorder(Core, ratio, median))
induce_distal$Distal <- with(induce_distal, reorder(Distal, ratio, median))
induce_distal$Core <- gsub("_core", "", induce_distal$Core)
induce_steric <- subset(induce_exp, grepl("STERIC", induce_exp$name)) %>%
separate(col = 'name', into = c("Library", "Loop_Distance", "UP", "Core", "Extended_Min_10", "Min_10", "Proximal"), sep = "-", remove = F)
induce_steric$Min_10 <- with(induce_steric, reorder(Min_10, ratio, median))
induce_steric$Core <- with(induce_steric, reorder(Core, ratio, median))
induce_steric$Proximal <- with(induce_steric, reorder(Proximal, ratio, median))
induce_multiple <- subset(induce_exp, grepl("MULTIPLE", induce_exp$name)) %>% separate(col = 'name', into = c("Library", "Distal_left", "Distal_right", "Min_35", "Min_10", "Proximal"), sep = "-", remove = F)
# Figure S3: Pcombo supplements
A <- induce_combo %>%
filter(Distal == 'lacOsym', Min_10 == 'minus10cons', Min_35 == 'minus35cons') %>%
gather(Type, Expression, 'normalized_RNA_exp_Induced_12':'normalized_RNA_exp_UnInduced_12') %>%
ggplot(aes(x = Proximal, y = Expression)) + geom_line(color = 'black', size =1, alpha = 1) + geom_point(aes(fill = Type), pch = 21, color = 'black', size = 8, alpha = 1) +
scale_fill_viridis(discrete = TRUE, direction = -1, name = 'Condition', labels = c("Induced Expression", "Uninduced Expression")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24),
legend.text = element_text(size = 20),
legend.title = element_text(size = 21))
a1 <- ggplot(filter(induce_combo, Min_10 == 'minus10cons', Min_35 == 'minus35_31A_32C'), aes(x = Proximal, y = Distal)) + geom_tile(aes(fill = log2(ratio)), color = 'black', alpha = 0.9, size = 0.25) +
scale_fill_viridis(name = expression('log'[2]~'(Fold-change)')) +
labs(x = 'Proximal', y = 'Distal', title = 'Consensus -10 & Mutated -35 (31A,32C)', size = 20) +
theme(panel.background = element_rect(fill = "gray40")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
scale_y_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24))
a2 <-ggplot(filter(induce_combo, Min_10 == 'minus10_12G', Min_35 == 'minus35cons'), aes(x = Proximal, y = Distal)) + geom_tile(aes(fill = log2(ratio)), color = 'black', alpha = 0.9, size = 0.25) +
scale_fill_viridis(name = expression('log'[2]~'(Fold-change)')) +
labs(x = 'Proximal', y = 'Distal', title = 'Mutated -10 (12G) & Consensus -35', size = 20) +
theme(panel.background = element_rect(fill = "gray40")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
scale_y_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym"))  + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24))
B <- plot_grid(a1, a2)
rm(a1,a2)
plot_grid(A,B, labels='AUTO', ncol = 1)
ggsave('../FigureSX/FigureS3.pdf', height = 12, width = 16)
# Figure S3: Pcombo supplements
A <- induce_combo %>%
filter(Distal == 'lacOsym', Min_10 == 'minus10cons', Min_35 == 'minus35cons') %>%
gather(Type, Expression, 'normalized_RNA_exp_Induced_12':'normalized_RNA_exp_UnInduced_12') %>%
ggplot(aes(x = Proximal, y = Expression)) + geom_line(color = 'black', size =1, alpha = 1) + geom_point(aes(fill = Type), pch = 21, color = 'black', size = 5, alpha = 1) +
scale_fill_viridis(discrete = TRUE, direction = -1, name = 'Condition', labels = c("Induced Expression", "Uninduced Expression")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24),
legend.text = element_text(size = 20),
legend.title = element_text(size = 21))
a1 <- ggplot(filter(induce_combo, Min_10 == 'minus10cons', Min_35 == 'minus35_31A_32C'), aes(x = Proximal, y = Distal)) + geom_tile(aes(fill = log2(ratio)), color = 'black', alpha = 0.9, size = 0.25) +
scale_fill_viridis(name = expression('log'[2]~'(Fold-change)')) +
labs(x = 'Proximal', y = 'Distal', title = 'Consensus -10 & Mutated -35 (31A,32C)', size = 20) +
theme(panel.background = element_rect(fill = "gray40")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
scale_y_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24))
a2 <-ggplot(filter(induce_combo, Min_10 == 'minus10_12G', Min_35 == 'minus35cons'), aes(x = Proximal, y = Distal)) + geom_tile(aes(fill = log2(ratio)), color = 'black', alpha = 0.9, size = 0.25) +
scale_fill_viridis(name = expression('log'[2]~'(Fold-change)')) +
labs(x = 'Proximal', y = 'Distal', title = 'Mutated -10 (12G) & Consensus -35', size = 20) +
theme(panel.background = element_rect(fill = "gray40")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
scale_y_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym"))  + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24))
B <- plot_grid(a1, a2)
rm(a1,a2)
plot_grid(A,B, labels='AUTO', ncol = 1)
ggsave('../FigureSX/FigureS3.pdf', height = 12, width = 16)
# Figure S3: Pcombo supplements
A <- induce_combo %>%
filter(Distal == 'lacOsym', Min_10 == 'minus10cons', Min_35 == 'minus35cons') %>%
gather(Type, Expression, 'normalized_RNA_exp_Induced_12':'normalized_RNA_exp_UnInduced_12') %>%
ggplot(aes(x = Proximal, y = Expression)) + geom_line(color = 'black', size = 1, alpha = 1) + geom_point(aes(color = Type), size = 5, alpha = 0.5) +
scale_color_viridis(discrete = TRUE, direction = -1, name = 'Condition', labels = c("Induced Expression", "Uninduced Expression")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24),
legend.text = element_text(size = 20),
legend.title = element_text(size = 21))
a1 <- ggplot(filter(induce_combo, Min_10 == 'minus10cons', Min_35 == 'minus35_31A_32C'), aes(x = Proximal, y = Distal)) + geom_tile(aes(fill = log2(ratio)), color = 'black', alpha = 0.9, size = 0.25) +
scale_fill_viridis(name = expression('log'[2]~'(Fold-change)')) +
labs(x = 'Proximal', y = 'Distal', title = 'Consensus -10 & Mutated -35 (31A,32C)', size = 20) +
theme(panel.background = element_rect(fill = "gray40")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
scale_y_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24))
a2 <-ggplot(filter(induce_combo, Min_10 == 'minus10_12G', Min_35 == 'minus35cons'), aes(x = Proximal, y = Distal)) + geom_tile(aes(fill = log2(ratio)), color = 'black', alpha = 0.9, size = 0.25) +
scale_fill_viridis(name = expression('log'[2]~'(Fold-change)')) +
labs(x = 'Proximal', y = 'Distal', title = 'Mutated -10 (12G) & Consensus -35', size = 20) +
theme(panel.background = element_rect(fill = "gray40")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
scale_y_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym"))  + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24))
B <- plot_grid(a1, a2)
rm(a1,a2)
plot_grid(A,B, labels='AUTO', ncol = 1)
ggsave('../FigureSX/FigureS3.pdf', height = 12, width = 16)
# Figure S3: Pcombo supplements
A <- induce_combo %>%
filter(Distal == 'lacOsym', Min_10 == 'minus10cons', Min_35 == 'minus35cons') %>%
gather(Type, Expression, 'normalized_RNA_exp_Induced_12':'normalized_RNA_exp_UnInduced_12') %>%
ggplot(aes(x = Proximal, y = Expression)) + geom_line(color = 'black', size = 1, alpha = 0.7) + geom_point(aes(color = Type), size = 5, alpha = 0.7) +
scale_color_viridis(discrete = TRUE, direction = -1, name = 'Condition', labels = c("Induced Expression", "Uninduced Expression")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24),
legend.text = element_text(size = 20),
legend.title = element_text(size = 21))
a1 <- ggplot(filter(induce_combo, Min_10 == 'minus10cons', Min_35 == 'minus35_31A_32C'), aes(x = Proximal, y = Distal)) + geom_tile(aes(fill = log2(ratio)), color = 'black', alpha = 0.9, size = 0.25) +
scale_fill_viridis(name = expression('log'[2]~'(Fold-change)')) +
labs(x = 'Proximal', y = 'Distal', title = 'Consensus -10 & Mutated -35 (31A,32C)', size = 20) +
theme(panel.background = element_rect(fill = "gray40")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
scale_y_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24))
a2 <-ggplot(filter(induce_combo, Min_10 == 'minus10_12G', Min_35 == 'minus35cons'), aes(x = Proximal, y = Distal)) + geom_tile(aes(fill = log2(ratio)), color = 'black', alpha = 0.9, size = 0.25) +
scale_fill_viridis(name = expression('log'[2]~'(Fold-change)')) +
labs(x = 'Proximal', y = 'Distal', title = 'Mutated -10 (12G) & Consensus -35', size = 20) +
theme(panel.background = element_rect(fill = "gray40")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
scale_y_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym"))  + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24))
B <- plot_grid(a1, a2)
rm(a1,a2)
plot_grid(A,B, labels='AUTO', ncol = 1)
ggsave('../FigureSX/FigureS3.pdf', height = 12, width = 16)
# Figure S3: Pcombo supplements
A <- induce_combo %>%
filter(Distal == 'lacOsym', Min_10 == 'minus10cons', Min_35 == 'minus35cons') %>%
gather(Type, Expression, 'normalized_RNA_exp_Induced_12':'normalized_RNA_exp_UnInduced_12') %>%
ggplot(aes(x = Proximal, y = Expression)) + geom_line(color = 'black', size = 1, alpha = 0.7) + geom_point(aes(color = Type), size = 10, alpha = 0.7) +
scale_color_viridis(discrete = TRUE, direction = -1, name = 'Condition', labels = c("Induced Expression", "Uninduced Expression")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24),
legend.text = element_text(size = 20),
legend.title = element_text(size = 21))
a1 <- ggplot(filter(induce_combo, Min_10 == 'minus10cons', Min_35 == 'minus35_31A_32C'), aes(x = Proximal, y = Distal)) + geom_tile(aes(fill = log2(ratio)), color = 'black', alpha = 0.9, size = 0.25) +
scale_fill_viridis(name = expression('log'[2]~'(Fold-change)')) +
labs(x = 'Proximal', y = 'Distal', title = 'Consensus -10 & Mutated -35 (31A,32C)', size = 20) +
theme(panel.background = element_rect(fill = "gray40")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
scale_y_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24))
a2 <-ggplot(filter(induce_combo, Min_10 == 'minus10_12G', Min_35 == 'minus35cons'), aes(x = Proximal, y = Distal)) + geom_tile(aes(fill = log2(ratio)), color = 'black', alpha = 0.9, size = 0.25) +
scale_fill_viridis(name = expression('log'[2]~'(Fold-change)')) +
labs(x = 'Proximal', y = 'Distal', title = 'Mutated -10 (12G) & Consensus -35', size = 20) +
theme(panel.background = element_rect(fill = "gray40")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
scale_y_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym"))  + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24))
B <- plot_grid(a1, a2)
rm(a1,a2)
plot_grid(A,B, labels='AUTO', ncol = 1)
ggsave('../FigureSX/FigureS3.pdf', height = 12, width = 16)
# Figure S3: Pcombo supplements
A <- induce_combo %>%
filter(Distal == 'lacOsym', Min_10 == 'minus10cons', Min_35 == 'minus35cons') %>%
gather(Type, Expression, 'normalized_RNA_exp_Induced_12':'normalized_RNA_exp_UnInduced_12') %>%
ggplot(aes(x = Proximal, y = Expression)) + geom_line(color = 'black', size = 1, alpha = 0.7) + geom_point(aes(color = Type), size = 10, alpha = 0.7) +
scale_color_manual(values = c("#20d420", "#000072"), direction = -1, name = 'Condition', labels = c("Induced Expression", "Uninduced Expression")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24),
legend.text = element_text(size = 20),
legend.title = element_text(size = 21))
# Figure S3: Pcombo supplements
A <- induce_combo %>%
filter(Distal == 'lacOsym', Min_10 == 'minus10cons', Min_35 == 'minus35cons') %>%
gather(Type, Expression, 'normalized_RNA_exp_Induced_12':'normalized_RNA_exp_UnInduced_12') %>%
ggplot(aes(x = Proximal, y = Expression)) + geom_line(color = 'black', size = 1, alpha = 0.7) + geom_point(aes(color = Type), size = 10, alpha = 0.7) +
scale_color_discrete(values = c("#20d420", "#000072"), direction = -1, name = 'Condition', labels = c("Induced Expression", "Uninduced Expression")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24),
legend.text = element_text(size = 20),
legend.title = element_text(size = 21))
# Figure S3: Pcombo supplements
A <- induce_combo %>%
filter(Distal == 'lacOsym', Min_10 == 'minus10cons', Min_35 == 'minus35cons') %>%
gather(Type, Expression, 'normalized_RNA_exp_Induced_12':'normalized_RNA_exp_UnInduced_12') %>%
ggplot(aes(x = Proximal, y = Expression)) + geom_line(color = 'black', size = 1, alpha = 0.7) + geom_point(aes(color = Type), size = 10, alpha = 0.7) +
scale_color_manual(values = c("#20d420", "#000072"), direction = -1, name = 'Condition', labels = c("Induced Expression", "Uninduced Expression")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24),
legend.text = element_text(size = 20),
legend.title = element_text(size = 21))
# Figure S3: Pcombo supplements
A <- induce_combo %>%
filter(Distal == 'lacOsym', Min_10 == 'minus10cons', Min_35 == 'minus35cons') %>%
gather(Type, Expression, 'normalized_RNA_exp_Induced_12':'normalized_RNA_exp_UnInduced_12') %>%
ggplot(aes(x = Proximal, y = Expression)) + geom_line(color = 'black', size = 1, alpha = 0.7) + geom_point(aes(color = Type), size = 10, alpha = 0.7) +
scale_colour_manual(values = c("#20d420", "#000072"), direction = -1, name = 'Condition', labels = c("Induced Expression", "Uninduced Expression")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24),
legend.text = element_text(size = 20),
legend.title = element_text(size = 21))
# Figure S3: Pcombo supplements
A <- induce_combo %>%
filter(Distal == 'lacOsym', Min_10 == 'minus10cons', Min_35 == 'minus35cons') %>%
gather(Type, Expression, 'normalized_RNA_exp_Induced_12':'normalized_RNA_exp_UnInduced_12') %>%
ggplot(aes(x = Proximal, y = Expression)) + geom_line(color = 'black', size = 1, alpha = 0.7) + geom_point(aes(color = Type), size = 10, alpha = 0.7) +
scale_colour_manual(values = c("#20d420", "#000072"), name = 'Condition', labels = c("Induced Expression", "Uninduced Expression")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24),
legend.text = element_text(size = 20),
legend.title = element_text(size = 21))
# Figure S3: Pcombo supplements
A <- induce_combo %>%
filter(Distal == 'lacOsym', Min_10 == 'minus10cons', Min_35 == 'minus35cons') %>%
gather(Type, Expression, 'normalized_RNA_exp_Induced_12':'normalized_RNA_exp_UnInduced_12') %>%
ggplot(aes(x = Proximal, y = Expression)) + geom_line(color = 'black', size = 1, alpha = 0.7) + geom_point(aes(color = Type), size = 10, alpha = 0.7) +
scale_colour_manual(values = c("#20d420", "#000072"), name = 'Condition', labels = c("Induced Expression", "Uninduced Expression")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24),
legend.text = element_text(size = 20),
legend.title = element_text(size = 21))
a1 <- ggplot(filter(induce_combo, Min_10 == 'minus10cons', Min_35 == 'minus35_31A_32C'), aes(x = Proximal, y = Distal)) + geom_tile(aes(fill = log2(ratio)), color = 'black', alpha = 0.9, size = 0.25) +
scale_fill_viridis(name = expression('log'[2]~'(Fold-change)')) +
labs(x = 'Proximal', y = 'Distal', title = 'Consensus -10 & Mutated -35 (31A,32C)', size = 20) +
theme(panel.background = element_rect(fill = "gray40")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
scale_y_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24))
a2 <-ggplot(filter(induce_combo, Min_10 == 'minus10_12G', Min_35 == 'minus35cons'), aes(x = Proximal, y = Distal)) + geom_tile(aes(fill = log2(ratio)), color = 'black', alpha = 0.9, size = 0.25) +
scale_fill_viridis(name = expression('log'[2]~'(Fold-change)')) +
labs(x = 'Proximal', y = 'Distal', title = 'Mutated -10 (12G) & Consensus -35', size = 20) +
theme(panel.background = element_rect(fill = "gray40")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
scale_y_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym"))  + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24))
B <- plot_grid(a1, a2)
rm(a1,a2)
plot_grid(A,B, labels='AUTO', ncol = 1)
ggsave('../FigureSX/FigureS3.pdf', height = 12, width = 16)
# Figure S3: Pcombo supplements
A <- induce_combo %>%
filter(Distal == 'lacOsym', Min_10 == 'minus10cons', Min_35 == 'minus35cons') %>%
gather(Type, Expression, 'normalized_RNA_exp_Induced_12':'normalized_RNA_exp_UnInduced_12') %>%
ggplot(aes(x = Proximal, y = Expression)) + geom_line(color = 'black', size = 1, alpha = 0.7) + geom_point(aes(color = Type), size = 10, alpha = 0.7) +
scale_color_manual(discrete = TRUE, direction = -1, name = 'Condition', labels = c("Induced Expression", "Uninduced Expression")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24),
legend.text = element_text(size = 20),
legend.title = element_text(size = 21))
# Figure S3: Pcombo supplements
A <- induce_combo %>%
filter(Distal == 'lacOsym', Min_10 == 'minus10cons', Min_35 == 'minus35cons') %>%
gather(Type, Expression, 'normalized_RNA_exp_Induced_12':'normalized_RNA_exp_UnInduced_12') %>%
ggplot(aes(x = Proximal, y = Expression)) + geom_line(color = 'black', size = 1, alpha = 0.7) + geom_point(aes(color = Type), size = 10, alpha = 0.7) +
scale_color_viridis(discrete = TRUE, direction = -1, name = 'Condition', labels = c("Induced Expression", "Uninduced Expression")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24),
legend.text = element_text(size = 20),
legend.title = element_text(size = 21))
a1 <- ggplot(filter(induce_combo, Min_10 == 'minus10cons', Min_35 == 'minus35_31A_32C'), aes(x = Proximal, y = Distal)) + geom_tile(aes(fill = log2(ratio)), color = 'black', alpha = 0.9, size = 0.25) +
scale_fill_viridis(name = expression('log'[2]~'(Fold-change)')) +
labs(x = 'Proximal', y = 'Distal', title = 'Consensus -10 & Mutated -35 (31A,32C)', size = 20) +
theme(panel.background = element_rect(fill = "gray40")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
scale_y_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24))
a2 <-ggplot(filter(induce_combo, Min_10 == 'minus10_12G', Min_35 == 'minus35cons'), aes(x = Proximal, y = Distal)) + geom_tile(aes(fill = log2(ratio)), color = 'black', alpha = 0.9, size = 0.25) +
scale_fill_viridis(name = expression('log'[2]~'(Fold-change)')) +
labs(x = 'Proximal', y = 'Distal', title = 'Mutated -10 (12G) & Consensus -35', size = 20) +
theme(panel.background = element_rect(fill = "gray40")) +
scale_x_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym")) +
scale_y_discrete(limits = c("lacOscram", "O3_leftSym", "lacO2", "O3_rightSym", "O1_rightSym", "O2_leftSym", "lacO3", "O2_rightSym", "lacO1", "lacOsym"))  + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20),
axis.title.x.bottom = element_text(size = 24),
axis.title.y.left = element_text(size = 24))
B <- plot_grid(a1, a2)
rm(a1,a2)
plot_grid(A,B, labels='AUTO', ncol = 1)
ggsave('../FigureSX/FigureS3.pdf', height = 12, width = 16)
